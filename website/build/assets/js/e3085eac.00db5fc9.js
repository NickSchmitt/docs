"use strict";(self.webpackChunkatmo_trial_doc=self.webpackChunkatmo_trial_doc||[]).push([[7088],{3905:function(e,t,r){r.d(t,{Zo:function(){return s},kt:function(){return f}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function u(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),i=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},s=function(e){var t=i(e.components);return n.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),m=i(r),f=a,d=m["".concat(p,".").concat(f)]||m[f]||c[f]||o;return r?n.createElement(d,l(l({ref:t},s),{},{components:r})):n.createElement(d,l({ref:t},s))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=m;var u={};for(var p in t)hasOwnProperty.call(t,p)&&(u[p]=t[p]);u.originalType=e,u.mdxType="string"==typeof e?e:a,l[1]=u;for(var i=2;i<o;i++)l[i]=r[i];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},2007:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return u},contentTitle:function(){return p},metadata:function(){return i},toc:function(){return s},default:function(){return m}});var n=r(7462),a=r(3366),o=(r(7294),r(3905)),l=["components"],u={},p="GraphQL requests",i={unversionedId:"atmo/runnable-api/graphql-requests",id:"atmo/runnable-api/graphql-requests",isDocsHomePage:!1,title:"GraphQL requests",description:"You can use the graphql namespace of the Runnable API to make",source:"@site/docs/atmo/runnable-api/graphql-requests.md",sourceDirName:"atmo/runnable-api",slug:"/atmo/runnable-api/graphql-requests",permalink:"/docs/docs/atmo/runnable-api/graphql-requests",editUrl:"https://github.com/suborbital/docs/docs/atmo/runnable-api/graphql-requests.md",tags:[],version:"current",lastUpdatedAt:1638971475,formattedLastUpdatedAt:"12/8/2021",frontMatter:{},sidebar:"docs",previous:{title:"Static files",permalink:"/docs/docs/atmo/runnable-api/file"},next:{title:"HTTP requests",permalink:"/docs/docs/atmo/runnable-api/http"}},s=[{value:"QUERY",id:"query",children:[],level:2}],c={toc:s};function m(e){var t=e.components,r=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"graphql-requests"},"GraphQL requests"),(0,o.kt)("p",null,"You can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"graphql")," namespace of the Runnable API to make\nGraphQL queries from your Runnable code. GraphQL is a common\nway of exposing external APIs, and makes connecting to external\nservices very straightforward."),(0,o.kt)("p",null,"For Rust, these methods are available under the ",(0,o.kt)("inlineCode",{parentName:"p"},"graphql")," module"),(0,o.kt)("p",null,"Example: ",(0,o.kt)("inlineCode",{parentName:"p"},"graphql::query()"),".  "),(0,o.kt)("p",null,"For TypeScript/AssemblyScript, they are prefixed with graphQL."),(0,o.kt)("p",null,"Example: ",(0,o.kt)("inlineCode",{parentName:"p"},"import { graphQLQuery } from '@suborbital/suborbital'")),(0,o.kt)("p",null,"The following namespace methods are available:"),(0,o.kt)("h2",{id:"query"},"QUERY"),(0,o.kt)("p",null,"Performs a graphQL query:"),(0,o.kt)("p",null,"Rust:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"pub fn query(endpoint: &str, query: &str) -> Result<Vec<u8>,super::runnable::RunErr>\n")),(0,o.kt)("p",null,"AssemblyScript:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"function graphQLQuery(endpoint: string, query: string): ArrayBuffer\n")),(0,o.kt)("p",null,"Swift:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},"// not yet supported\n")))}m.isMDXComponent=!0}}]);