"use strict";(self.webpackChunksuborbital_docs=self.webpackChunksuborbital_docs||[]).push([[6908],{8215:function(e,n,t){var a=t(7294);n.Z=function(e){var n=e.children,t=e.hidden,r=e.className;return a.createElement("div",{role:"tabpanel",hidden:t,className:r},n)}},9877:function(e,n,t){t.d(n,{Z:function(){return c}});var a=t(7462),r=t(7294),l=t(2389),i=t(9548),o=t(6010),u="tabItem_LplD";function s(e){var n,t,l,s=e.lazy,c=e.block,p=e.defaultValue,d=e.values,m=e.groupId,h=e.className,b=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),g=null!=d?d:b.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),f=(0,i.lx)(g,(function(e,n){return e.value===n.value}));if(f.length>0)throw new Error('Docusaurus error: Duplicate values "'+f.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var v=null===p?p:null!=(n=null!=p?p:null==(t=b.find((function(e){return e.props.default})))?void 0:t.props.value)?n:null==(l=b[0])?void 0:l.props.value;if(null!==v&&!g.some((function(e){return e.value===v})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+v+'" but none of its children has the corresponding value. Available values are: '+g.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var k=(0,i.UB)(),y=k.tabGroupChoices,N=k.setTabGroupChoices,T=(0,r.useState)(v),w=T[0],R=T[1],x=[],A=(0,i.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var C=y[m];null!=C&&C!==w&&g.some((function(e){return e.value===C}))&&R(C)}var I=function(e){var n=e.currentTarget,t=x.indexOf(n),a=g[t].value;a!==w&&(A(n),R(a),null!=m&&N(m,a))},E=function(e){var n,t=null;switch(e.key){case"ArrowRight":var a=x.indexOf(e.currentTarget)+1;t=x[a]||x[0];break;case"ArrowLeft":var r=x.indexOf(e.currentTarget)-1;t=x[r]||x[x.length-1]}null==(n=t)||n.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":c},h)},g.map((function(e){var n=e.value,t=e.label,l=e.attributes;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:w===n?0:-1,"aria-selected":w===n,key:n,ref:function(e){return x.push(e)},onKeyDown:E,onFocus:I,onClick:I},l,{className:(0,o.Z)("tabs__item",u,null==l?void 0:l.className,{"tabs__item--active":w===n})}),null!=t?t:n)}))),s?(0,r.cloneElement)(b.filter((function(e){return e.props.value===w}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},b.map((function(e,n){return(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==w})}))))}function c(e){var n=(0,l.Z)();return r.createElement(s,(0,a.Z)({key:String(n)},e))}},911:function(e,n,t){t.r(n),t.d(n,{MyCode:function(){return y},contentTitle:function(){return d},default:function(){return T},frontMatter:function(){return p},getCodeBlockForLang:function(){return k},getCodeBlockLangType:function(){return v},getCodeBlockLangs:function(){return f},metadata:function(){return m},reactrLanguageSupport:function(){return g},reactrLanguages:function(){return b},toc:function(){return h}});var a=t(7462),r=t(3366),l=t(7294),i=t(3905),o=t(9877),u=t(8215),s=t(1736);var c=["components"],p={},d="Introduction to the Runnable API",m={unversionedId:"atmo/runnable-api/introduction",id:"atmo/runnable-api/introduction",title:"Introduction to the Runnable API",description:"//import MyComponentSource from '!!raw-loader!./myComponent';",source:"@site/docs/atmo/runnable-api/introduction.md",sourceDirName:"atmo/runnable-api",slug:"/atmo/runnable-api/introduction",permalink:"/docs/atmo/runnable-api/introduction",editUrl:"https://github.com/suborbital/docs/docs/atmo/runnable-api/introduction.md",tags:[],version:"current",lastUpdatedAt:1646218134,formattedLastUpdatedAt:"3/2/2022",frontMatter:{},sidebar:"docs",previous:{title:"Connections",permalink:"/docs/atmo/usage/connections"},next:{title:"Handling requests",permalink:"/docs/atmo/runnable-api/request"}},h=[{value:"The Runnable interface",id:"the-runnable-interface",children:[],level:2},{value:"An example Runnable",id:"an-example-runnable",children:[],level:2}],b=["rust","go","assemblyscript","grain","js","swift"],g={rust:{lang:"rust",name:"Rust",status:"stable"},go:{lang:"go",name:"Go",status:"stable"},assemblyscript:{lang:"assemblyscript",name:"AssemblyScript",status:"stable",highlighting:"typescript"},grain:{lang:"grain",name:"Grain",status:"stable"},js:{lang:"js",name:"JS/TS",status:"stable"},swift:{lang:"swift",name:"Swift",status:"stable"}},f=function(e){return b.filter((function(n){return!!k(n,e)})).map((function(e){return g[e]}))},v=function(e){var n;return"CodeBlock"===e.props.mdxType?e.props.language:"pre"===e.props.mdxType&&"code"===(null==(n=e.props.children)?void 0:n.props.mdxType)?e.props.children.props.className.replace("language-",""):null},k=function(e,n){var t=new Map;l.Children.forEach(n,(function(e){return t.set(v(e),e)}));var a=t.get(e);if(console.log(a),a&&g[e].highlighting){var r;if("CodeBlock"===a.props.mdxType)return console.log("Highlighting "+a.props.language+" CodeBlock as "+g[e].highlighting),l.cloneElement(a,{language:g[e].highlighting});if("pre"===a.props.mdxType&&"code"===(null==(r=a.props.children)?void 0:r.props.mdxType))return console.log("Highlighting "+a.props.children.props.className+" fenced code block as "+g[e].highlighting),l.cloneElement(a,{},l.cloneElement(a.props.children,{className:"language-"+g[e].highlighting}))}return a},y=function(e){var n=e.children;return(0,i.kt)(l.Fragment,null,(0,i.kt)(o.Z,{groupId:"reactr-language",defaultValue:null,mdxType:"Tabs"},f(n).map((function(e){var t=e.lang,a=e.name;e.status;return(0,i.kt)(u.Z,{value:t,label:a,mdxType:"TabItem"},k(t,n),console.log(k(t,n)))}))))},N={toc:h,reactrLanguages:b,getCodeBlockLangs:f,getCodeBlockLangType:v,getCodeBlockForLang:k,MyCode:y};function T(e){var n=e.components,t=(0,r.Z)(e,c);return(0,i.kt)("wrapper",(0,a.Z)({},N,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"introduction-to-the-runnable-api"},"Introduction to the Runnable API"),(0,i.kt)(y,{mdxType:"MyCode"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"pub trait Runnable {\n    fn run(&self, input: Vec<u8>) -> Result<Vec<u8>, RunErr>;\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-assemblyscript"},"export function run(input: ArrayBuffer): ArrayBuffer\n"))),(0,i.kt)(y,{mdxType:"MyCode"},(0,i.kt)(s.Z,{language:"rust",mdxType:"CodeBlock"},"pub trait Runnable {\n    fn run(&self, input: Vec<u8>) -> Result<Vec<u8>, RunErr>;\n}"),(0,i.kt)(s.Z,{language:"assemblyscript",source:"/examples/assemblyscript/run.as",mdxType:"CodeBlock"},"export function run(input: ArrayBuffer): ArrayBuffer")),(0,i.kt)("p",null,"The Runnables that you write for your Atmo application are compiled to\nWebAssembly, and are run in a controlled sandbox. The ",(0,i.kt)("strong",{parentName:"p"},"Runnable API"),"\nis the set of capabilities Atmo grants to the sandbox which can be used\nto build your application's logic."),(0,i.kt)("p",null,'When a Runnable is handling a particular request, Atmo binds that request\nto the module while it\'s being run. The Runnable API allows your code to\naccess everything about the request, and also gives you the ability to\naccess the "outside world" by giving functions for HTTP requests,\naccessing static files, logging, and more. This section describes all of\nthe capabilities available via the Runnable API and how to use them in\nRust and Swift Runnable code.'),(0,i.kt)("p",null,"The Runnable API is provided via a library for each of the supported languages,\nand simply needs to be imported to turn your module into a Runnable.\n",(0,i.kt)("inlineCode",{parentName:"p"},"subo")," will configure all of this on your behalf."),(0,i.kt)("h2",{id:"the-runnable-interface"},"The Runnable interface"),(0,i.kt)("p",null,"The first and most basic part of the Runnable API is the ",(0,i.kt)("inlineCode",{parentName:"p"},"Runnable")," interface\n(also known as a Rust trait or Swift protocol). Every Runnable you write will\nprovide an instance of an object that conforms to this interface.\nIt is very simple, and only requires one method, ",(0,i.kt)("inlineCode",{parentName:"p"},"run"),"."),(0,i.kt)(o.Z,{groupId:"reactr-language",mdxType:"Tabs"},(0,i.kt)(u.Z,{value:"rust",label:"Rust",mdxType:"TabItem"},(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"STATUS: STABLE")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The Rust Runnable API crate is considered stable."))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"pub trait Runnable {\n    fn run(&self, input: Vec<u8>) -> Result<Vec<u8>, RunErr>;\n}\n"))),(0,i.kt)(u.Z,{value:"assemblyscript",label:"AssemblyScript \ud83e\uddea",mdxType:"TabItem"},(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"STATUS: EXPERIMENTAL")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The TypeScript/AssemblyScript Runnable API library is still considered experimental."))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"export function run(input: ArrayBuffer): ArrayBuffer\n"))),(0,i.kt)(u.Z,{value:"swift",label:"Swift \ud83e\uddea",mdxType:"TabItem"},(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"STATUS: EXPERIMENTAL")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The Swift Runnable API library is still considered experimental, and tends to lag\nslightly behind the others in terms of available features."))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"public protocol Runnable {\n    func run(input: String) -> String\n}\n"))),(0,i.kt)(u.Z,{value:"tinygo",label:"Tiny Go \ud83e\uddea",mdxType:"TabItem"},(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"STATUS: PREVIEW")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Todo: Go/TinyGo API"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"...\n")))),(0,i.kt)("p",null,"Your Runnable object will be created automatically by ",(0,i.kt)("inlineCode",{parentName:"p"},"subo")," when you use the\n",(0,i.kt)("inlineCode",{parentName:"p"},"create runnable")," command. All you need to do is write your logic within the ",(0,i.kt)("inlineCode",{parentName:"p"},"run"),"\nmethod, and Atmo will handle executing it."),(0,i.kt)("p",null,"There are several namespaces available in the Runnable API, each are discussed in\nthe various pages in this reference."),(0,i.kt)("p",null,"When handling HTTP requests, the input to the ",(0,i.kt)("inlineCode",{parentName:"p"},"run")," method is the body of the\nrequest being handled. The other details of the request are available using the\n",(0,i.kt)("inlineCode",{parentName:"p"},"req")," namespace and will be discussed in the coming ",(0,i.kt)("a",{parentName:"p",href:"request"},"sections"),"."),(0,i.kt)("h2",{id:"an-example-runnable"},"An example Runnable"),(0,i.kt)("p",null,"Here is an example of a Runnable, written in Rust."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"subo")," CLI tool will automatically create new Runnables for you with the ",(0,i.kt)("inlineCode",{parentName:"p"},"subo create runnable")," command."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'use suborbital::runnable::*;\nuse suborbital::{req, util};\n\nstruct Foobar{}\n\nimpl Runnable for Foobar {\n    fn run(&self, _: Vec<u8>) -> Result<Vec<u8>, RunErr> {\n        let body = req::body_raw();\n        let body_string = util::to_string(body);\n\n        Ok(String::from(format!("hello {}", body_string)).as_bytes().to_vec())\n    }\n}\n\n\n// initialize the runner, do not edit below //\nstatic RUNNABLE: &Foobar = &Foobar{};\n\n#[no_mangle]\npub extern fn init() {\n    use_runnable(RUNNABLE);\n}\n')),(0,i.kt)("p",null,"This Runnable uses the ",(0,i.kt)("a",{parentName:"p",href:"request"},(0,i.kt)("inlineCode",{parentName:"a"},"req"))," namespace to fetch the body of the HTTP request being handled, and then returns it."),(0,i.kt)("p",null,"To learn about all of the Runnable API namespaces, read on!"))}T.isMDXComponent=!0}}]);