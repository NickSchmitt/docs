"use strict";(self.webpackChunkatmo_trial_doc=self.webpackChunkatmo_trial_doc||[]).push([[53],{1109:function(e){e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docs":[{"type":"link","label":"The Suborbital Ecosystem","href":"/docs/suborbital-ecosystem/the-suborbital-ecosystem","docId":"suborbital-ecosystem/the-suborbital-ecosystem"},{"type":"category","label":"Intro to WebAssembly","collapsible":false,"items":[{"type":"link","label":"History of the Internet","href":"/docs/intro-to-webassembly/history","docId":"intro-to-webassembly/history"},{"type":"link","label":"Why WebAssembly","href":"/docs/intro-to-webassembly/why-webassembly","docId":"intro-to-webassembly/why-webassembly"}],"collapsed":false},{"type":"category","label":"Compute","collapsible":true,"items":[{"type":"category","collapsed":true,"collapsible":true,"label":"Quickstart","items":[{"type":"link","label":"Setup","href":"/docs/compute/quickstart/create-an-environment-token-with-subo","docId":"compute/quickstart/create-an-environment-token-with-subo"},{"type":"link","label":"Run Compute locally","href":"/docs/compute/quickstart/run-compute-locally","docId":"compute/quickstart/run-compute-locally"},{"type":"link","label":"Working with functions","href":"/docs/compute/quickstart/write-functions","docId":"compute/quickstart/write-functions"},{"type":"link","label":"Connect your application","href":"/docs/compute/quickstart/connect-your-application","docId":"compute/quickstart/connect-your-application"},{"type":"link","label":"Using Compute from JavaScript or TypeScript","href":"/docs/compute/quickstart/client-libraries/nodejs","docId":"compute/quickstart/client-libraries/nodejs"},{"type":"link","label":"Using Compute from Go","href":"/docs/compute/quickstart/client-libraries/golang","docId":"compute/quickstart/client-libraries/golang"}]},{"type":"category","collapsed":true,"collapsible":true,"label":"Concepts","items":[{"type":"link","label":"Data Plane vs Control Plane","href":"/docs/compute/concepts/data-plane-vs-control-plane","docId":"compute/concepts/data-plane-vs-control-plane"},{"type":"link","label":"Fully-qualified function names","href":"/docs/compute/concepts/fully-qualified-function-names","docId":"compute/concepts/fully-qualified-function-names"},{"type":"link","label":"Namespaces","href":"/docs/compute/concepts/namespaces","docId":"compute/concepts/namespaces"}]},{"type":"category","collapsed":true,"collapsible":true,"label":"Integrating the Function Editor","items":[{"type":"link","label":"Function editor","href":"/docs/compute/integrate-the-function-editor/code-editor","docId":"compute/integrate-the-function-editor/code-editor"}]},{"type":"category","collapsed":true,"collapsible":true,"label":"Customizing functions","items":[{"type":"link","label":"Custom function templates","href":"/docs/compute/customizing-functions/custom-function-templates","docId":"compute/customizing-functions/custom-function-templates"},{"type":"link","label":"Custom libraries","href":"/docs/compute/customizing-functions/custom-libraries","docId":"compute/customizing-functions/custom-libraries"}]},{"type":"category","collapsed":true,"collapsible":true,"label":"Cloud Deployment","items":[{"type":"link","label":"Configure capabilities","href":"/docs/compute/cloud-deployment/configure-capabilities","docId":"compute/cloud-deployment/configure-capabilities"},{"type":"link","label":"Deploy Compute to your cloud environment","href":"/docs/compute/cloud-deployment/install-compute-in-your-cloud-environment","docId":"compute/cloud-deployment/install-compute-in-your-cloud-environment"}]}],"collapsed":true,"href":"/docs/compute/what-is-compute"},{"type":"category","label":"Atmo","collapsible":true,"items":[{"type":"link","label":"Getting started","href":"/docs/atmo/get-started","docId":"atmo/get-started"},{"collapsed":false,"type":"category","label":"Concepts","items":[{"type":"link","label":"Runnables","href":"/docs/atmo/concepts/runnables","docId":"atmo/concepts/runnables"},{"type":"link","label":"The Directive","href":"/docs/atmo/concepts/the-directive","docId":"atmo/concepts/the-directive"},{"type":"link","label":"State","href":"/docs/atmo/concepts/state","docId":"atmo/concepts/state"},{"type":"link","label":"Static Directory","href":"/docs/atmo/concepts/static-directory","docId":"atmo/concepts/static-directory"}],"collapsible":true},{"type":"category","label":"Usage","items":[{"type":"link","label":"Creating Runnables","href":"/docs/atmo/usage/creating-runnables","docId":"atmo/usage/creating-runnables"},{"type":"link","label":"Creating handlers","href":"/docs/atmo/usage/creating-handlers","docId":"atmo/usage/creating-handlers"},{"type":"link","label":"Building a Bundle","href":"/docs/atmo/usage/building-a-bundle","docId":"atmo/usage/building-a-bundle"},{"type":"link","label":"Deploying Atmo","href":"/docs/atmo/usage/deploying-atmo","docId":"atmo/usage/deploying-atmo"},{"type":"link","label":"Error handling","href":"/docs/atmo/usage/error-handling","docId":"atmo/usage/error-handling"},{"type":"link","label":"Headless Mode","href":"/docs/atmo/usage/headless","docId":"atmo/usage/headless"},{"type":"link","label":"Managing state","href":"/docs/atmo/usage/managing-state","docId":"atmo/usage/managing-state"},{"type":"link","label":"Scheduled jobs","href":"/docs/atmo/usage/schedules","docId":"atmo/usage/schedules"},{"type":"link","label":"Streams","href":"/docs/atmo/usage/streams","docId":"atmo/usage/streams"},{"type":"link","label":"Using SQL databases","href":"/docs/atmo/usage/using-sql-databases","docId":"atmo/usage/using-sql-databases"}],"collapsible":true,"collapsed":true},{"type":"category","label":"Runnable API","items":[{"type":"link","label":"Authentication","href":"/docs/atmo/runnable-api/authentication","docId":"atmo/runnable-api/authentication"},{"type":"link","label":"Accessing cache","href":"/docs/atmo/runnable-api/cache","docId":"atmo/runnable-api/cache"},{"type":"link","label":"Example Runnable","href":"/docs/atmo/runnable-api/example-runnable","docId":"atmo/runnable-api/example-runnable"},{"type":"link","label":"Static files","href":"/docs/atmo/runnable-api/file","docId":"atmo/runnable-api/file"},{"type":"link","label":"GraphQL requests","href":"/docs/atmo/runnable-api/graphql-requests","docId":"atmo/runnable-api/graphql-requests"},{"type":"link","label":"HTTP requests","href":"/docs/atmo/runnable-api/http","docId":"atmo/runnable-api/http"},{"type":"link","label":"Structured logging","href":"/docs/atmo/runnable-api/logging","docId":"atmo/runnable-api/logging"},{"type":"link","label":"Handling requests","href":"/docs/atmo/runnable-api/request","docId":"atmo/runnable-api/request"},{"type":"link","label":"Modifying responses","href":"/docs/atmo/runnable-api/response","docId":"atmo/runnable-api/response"}],"collapsible":true,"collapsed":true,"href":"/docs/atmo/runnable-api/introduction"}],"collapsed":true,"href":"/docs/atmo/about-atmo"},{"type":"link","label":"Sat","href":"/docs/sat/about-sat","docId":"sat/about-sat"},{"type":"category","label":"Building Blocks","collapsible":true,"items":[{"type":"category","label":"Reactr","items":[{"type":"link","label":"Reactr and WASM","href":"/docs/reactr/wasm","docId":"reactr/wasm"},{"type":"link","label":"Reactr and GRAV","href":"/docs/reactr/grav","docId":"reactr/grav"},{"type":"link","label":"Reactr and FaaS","href":"/docs/reactr/faas","docId":"reactr/faas"}],"collapsible":true,"collapsed":true,"href":"/docs/reactr/guide"},{"type":"category","label":"Vektor","items":[{"type":"link","label":"Testing Vektor","href":"/docs/vektor/testing-vk-servers","docId":"vektor/testing-vk-servers"}],"collapsible":true,"collapsed":true,"href":"/docs/vektor/getting-started"},{"type":"category","label":"Grav","items":[{"type":"link","label":"A brief overview","href":"/docs/grav/introduction/concepts/a-brief-overview","docId":"grav/introduction/concepts/a-brief-overview"},{"type":"category","collapsed":true,"collapsible":true,"label":"Concepts","items":[{"type":"link","label":"The Grav Instance","href":"/docs/grav/introduction/concepts/the-grav-instance","docId":"grav/introduction/concepts/the-grav-instance"},{"type":"link","label":"Pods","href":"/docs/grav/introduction/concepts/pods","docId":"grav/introduction/concepts/pods"},{"type":"link","label":"Reciepts","href":"/docs/grav/introduction/concepts/receipts","docId":"grav/introduction/concepts/receipts"}]},{"type":"category","collapsed":true,"collapsible":true,"label":"Usage","items":[{"type":"link","label":"Getting Started","href":"/docs/grav/usage/getting-started/start-here","docId":"grav/usage/getting-started/start-here"},{"type":"link","label":"Using the Grav Instance","href":"/docs/grav/usage/getting-started/using-the-grav-instance","docId":"grav/usage/getting-started/using-the-grav-instance"},{"type":"link","label":"Sending Messages","href":"/docs/grav/usage/getting-started/sending-messages","docId":"grav/usage/getting-started/sending-messages"},{"type":"link","label":"Receiving Messages","href":"/docs/grav/usage/getting-started/receiving-messages","docId":"grav/usage/getting-started/receiving-messages"},{"type":"link","label":"Request / Reply","href":"/docs/grav/usage/getting-started/request-reply","docId":"grav/usage/getting-started/request-reply"},{"type":"link","label":"Grav Instance Options","href":"/docs/grav/usage/getting-started/grav-instance-options","docId":"grav/usage/getting-started/grav-instance-options"}]},{"type":"category","collapsed":true,"collapsible":true,"label":"Networked Usage","items":[{"type":"link","label":"Transports","href":"/docs/grav/networking/transports/getting-started-transports","docId":"grav/networking/transports/getting-started-transports"},{"type":"link","label":"HTTP Transport","href":"/docs/grav/networking/transports/http-transport","docId":"grav/networking/transports/http-transport"},{"type":"link","label":"Websocket Transport","href":"/docs/grav/networking/transports/websocket-transport","docId":"grav/networking/transports/websocket-transport"},{"type":"link","label":"NATS Transport","href":"/docs/grav/networking/transports/nats-transport","docId":"grav/networking/transports/nats-transport"},{"type":"link","label":"Discovery","href":"/docs/grav/networking/discovery/getting-started-discovery","docId":"grav/networking/discovery/getting-started-discovery"},{"type":"link","label":"Local Network Discovery","href":"/docs/grav/networking/discovery/local-network-discovery","docId":"grav/networking/discovery/local-network-discovery"}]}],"collapsible":true,"collapsed":true,"href":"/docs/grav/what-is-grav"}],"collapsed":true},{"type":"link","label":"Contributing to Suborbital","href":"/docs/contributing-guide/contributing-to-suborbital","docId":"contributing-guide/contributing-to-suborbital"}]},"docs":{"atmo/about-atmo":{"id":"atmo/about-atmo","title":"About Atmo","description":"Atmo is a self-hosted platform that uses a Runnable bundle to run your described application.","sidebar":"docs"},"atmo/concepts/runnables":{"id":"atmo/concepts/runnables","title":"Runnables","description":"When building an application with Atmo, you segment your application\'s","sidebar":"docs"},"atmo/concepts/state":{"id":"atmo/concepts/state","title":"State","description":"Since Runnables are completely unaware of one another when being executed, there needs to be a way to pass data between them. Atmo uses a shared object called the request state to accomplish this. Request state is a key/value map that is updated automatically after each step in a handler.","sidebar":"docs"},"atmo/concepts/static-directory":{"id":"atmo/concepts/static-directory","title":"Static Directory","description":"An Atmo project can optionally contain a static directory. When present,","sidebar":"docs"},"atmo/concepts/the-directive":{"id":"atmo/concepts/the-directive","title":"The Directive","description":"The Directive is a declarative file that allows you to describe your application\'s business logic. By describing your application declaratively, you can avoid all of the boilerplate code that normally comes with building a web service such as binding to ports, setting up TLS, constructing a router, etc.","sidebar":"docs"},"atmo/get-started":{"id":"atmo/get-started","title":"Getting started","description":"The following guide will help you install the tooling and spin up an Atmo instance on your computer for local development.","sidebar":"docs"},"atmo/more-info/background":{"id":"atmo/more-info/background","title":"Background","description":"Atmo was born out of a desire to simplify server-side development by making it easy to bootstrap new projects, automatically scale to handle large amounts of traffic, and ensure their security with new technology and best practices."},"atmo/runnable-api/authentication":{"id":"atmo/runnable-api/authentication","title":"Authentication","description":"While not a direct part of the Runnable API, Atmo does include a method of","sidebar":"docs"},"atmo/runnable-api/cache":{"id":"atmo/runnable-api/cache","title":"Accessing cache","description":"Runnables can access an attached cache (such as Redis) using the","sidebar":"docs"},"atmo/runnable-api/example-runnable":{"id":"atmo/runnable-api/example-runnable","title":"Example Runnable","description":"Here is an example of a Runnable, written in Rust.","sidebar":"docs"},"atmo/runnable-api/file":{"id":"atmo/runnable-api/file","title":"Static files","description":"Files in the static directory of an Atmo project will be copied","sidebar":"docs"},"atmo/runnable-api/graphql-requests":{"id":"atmo/runnable-api/graphql-requests","title":"GraphQL requests","description":"You can use the graphql namespace of the Runnable API to make","sidebar":"docs"},"atmo/runnable-api/http":{"id":"atmo/runnable-api/http","title":"HTTP requests","description":"You can use the http namespace of the Runnable API to make HTTP","sidebar":"docs"},"atmo/runnable-api/introduction":{"id":"atmo/runnable-api/introduction","title":"Introduction","description":"The Runnables that you write for your Atmo application are compiled to","sidebar":"docs"},"atmo/runnable-api/logging":{"id":"atmo/runnable-api/logging","title":"Structured logging","description":"Your Runnable code can log to Atmo\'s structured output using","sidebar":"docs"},"atmo/runnable-api/request":{"id":"atmo/runnable-api/request","title":"Handling requests","description":"When a Runnable is used to handle an HTTP request, Atmo will","sidebar":"docs"},"atmo/runnable-api/response":{"id":"atmo/runnable-api/response","title":"Modifying responses","description":"When a Runnable is used to handle an HTTP request, Atmo","sidebar":"docs"},"atmo/usage/building-a-bundle":{"id":"atmo/usage/building-a-bundle","title":"Building a Bundle","description":"To run your Atmo application, we need to create a Runnable Bundle.","sidebar":"docs"},"atmo/usage/connections":{"id":"atmo/usage/connections","title":"Connections","description":"In order to build a useful application, Atmo needs to be able to connect to external resources. Currently, Atmo can connect to NATS, Redis, Kafka, MySQL, and PostgreSQL. Upcoming releases will include additional data sources as well."},"atmo/usage/creating-handlers":{"id":"atmo/usage/creating-handlers","title":"Creating handlers","description":"If you haven\'t created a project yet, see Creating a Project first.","sidebar":"docs"},"atmo/usage/creating-runnables":{"id":"atmo/usage/creating-runnables","title":"Creating Runnables","description":"Make sure you have the prerequisites installed before proceeding.","sidebar":"docs"},"atmo/usage/deploying-atmo":{"id":"atmo/usage/deploying-atmo","title":"Deploying Atmo","description":"Atmo is still in early Beta, and as such should not yet be used for","sidebar":"docs"},"atmo/usage/error-handling":{"id":"atmo/usage/error-handling","title":"Error handling","description":"When building your Atmo app, handling errors returned from Runnables","sidebar":"docs"},"atmo/usage/headless":{"id":"atmo/usage/headless","title":"Headless Mode","description":"Atmo can be run \'headless\' mode, which causes it to ignore the","sidebar":"docs"},"atmo/usage/managing-state":{"id":"atmo/usage/managing-state","title":"Managing state","description":"Let\'s take another look at the example Directive:","sidebar":"docs"},"atmo/usage/schedules":{"id":"atmo/usage/schedules","title":"Scheduled jobs","description":"You can easily define background jobs in your Directive","sidebar":"docs"},"atmo/usage/streams":{"id":"atmo/usage/streams","title":"Streams","description":"Atmo can handle several different types of input.","sidebar":"docs"},"atmo/usage/using-sql-databases":{"id":"atmo/usage/using-sql-databases","title":"Using SQL databases","description":"To connect Atmo with your SQL database, you will define the","sidebar":"docs"},"compute/api-reference/api-reference":{"id":"compute/api-reference/api-reference","title":"Compute APIs","description":"You can find a detailed specification of Compute\'s APIs here."},"compute/building-functions/github-integration":{"id":"compute/building-functions/github-integration","title":"GitHub Integration","description":"The GitHub integration is coming soon! Keep an eye out."},"compute/cloud-deployment/configure-capabilities":{"id":"compute/cloud-deployment/configure-capabilities","title":"Configure capabilities","description":"Compute functions can access a number of capabilities:","sidebar":"docs"},"compute/cloud-deployment/install-compute-in-your-cloud-environment":{"id":"compute/cloud-deployment/install-compute-in-your-cloud-environment","title":"Deploy Compute to your cloud environment","description":"To install Compute in the cloud, you\'ll use the subo tool to automatically install the Suborbital Compute Core into a Kubernetes cluster. You need to ensure you have some pre-requisites ready:","sidebar":"docs"},"compute/concepts/data-plane-vs-control-plane":{"id":"compute/concepts/data-plane-vs-control-plane","title":"Data Plane vs Control Plane","description":"There are two components of Compute: the Data Plane and the Control Plane.","sidebar":"docs"},"compute/concepts/fully-qualified-function-names":{"id":"compute/concepts/fully-qualified-function-names","title":"Fully-qualified function names","description":"Each function uploaded by your users has a unique name called a fully-qualified function name, or FQFN. The string representation of an FQFN is as follows:","sidebar":"docs"},"compute/concepts/namespaces":{"id":"compute/concepts/namespaces","title":"Namespaces","description":"Within Compute, your users\' functions can be organized into namespaces at your discretion \\\\(you control them, not your users\\\\). Namespces can be used to organize groups of functions designed for different use-cases within your product.","sidebar":"docs"},"compute/customizing-functions/custom-function-templates":{"id":"compute/customizing-functions/custom-function-templates","title":"Custom function templates","description":"When your users interact with Compute, you want them to have an experience that is tailored to your product. To ensure they get the most out of Compute, you can create custom function templates to control what your users see when they create a new function. You can also create custom libraries with utilities specific to your application for users to import from, which we\'ll explore in the next section.","sidebar":"docs"},"compute/customizing-functions/custom-libraries":{"id":"compute/customizing-functions/custom-libraries","title":"Custom libraries","description":"To continue to tailor your users\' experience to your product, you can create a custom library with functions and utilities designed specifically for your product. For example, your users will import library functions from @acmeco/acmeco instead of @suborbital/suborbital, and you\'ll be able to export library functions such as acmeco.getUsers versus the plain suborbital.httpGet.","sidebar":"docs"},"compute/installing/create-an-environment-token-with-subo":{"id":"compute/installing/create-an-environment-token-with-subo","title":"1. Create an environment token with Subo","description":"To use Compute, you\'ll need an environment token which allows the control plane to authenticate with the Suborbital Compute Network."},"compute/integrate-the-function-editor/code-editor":{"id":"compute/integrate-the-function-editor/code-editor","title":"Function editor","description":"The Compute code editor is available for you to embed in your application, so your customers can build their functions quickly and easily:","sidebar":"docs"},"compute/quickstart/client-libraries/golang":{"id":"compute/quickstart/client-libraries/golang","title":"Using Compute from Go","description":"The compute-go library helps you easily interact with the Compute API from your Go application. Suborbital Compute is designed to run alongside your application in a Kubernetes or Docker Compose environment.","sidebar":"docs"},"compute/quickstart/client-libraries/nodejs":{"id":"compute/quickstart/client-libraries/nodejs","title":"Using Compute from JavaScript or TypeScript","description":"Use this library to easily interact with Compute\'s APIs.","sidebar":"docs"},"compute/quickstart/connect-your-application":{"id":"compute/quickstart/connect-your-application","title":"Connect your application","description":"Now that you have set up Compute and created your first function, use the Compute client libraries to start integrating functions into your application:","sidebar":"docs"},"compute/quickstart/create-an-environment-token-with-subo":{"id":"compute/quickstart/create-an-environment-token-with-subo","title":"Setup","description":"To use Compute, you need an environment token and the Subo command line tool. This token allows the control plane to authenticate with the Suborbital Compute Network, our hosted service that manages billing, metadata storage, telemetry, and more.","sidebar":"docs"},"compute/quickstart/run-compute-locally":{"id":"compute/quickstart/run-compute-locally","title":"Run Compute locally","description":"To run Compute locally, you\'ll use the Subo CLI and Docker Compose, both of which must be installed before continuing.","sidebar":"docs"},"compute/quickstart/write-functions":{"id":"compute/quickstart/write-functions","title":"Working with functions","description":"Compute functions are built, tested, deployed, and run through the Compute API.","sidebar":"docs"},"compute/what-is-compute":{"id":"compute/what-is-compute","title":"About the Suborbital Compute Network","description":"Suborbital Compute is a platform that allows your users to write and deploy serverless extensions for your app so they can develop custom integrations, customizations, and workflows. We\'re using cutting-edge technology to help your users get the most out of your product. Our WebAssembly-based compute core lets you run user code within your infrastructure while being sure that you\'re protected from malicious code.","sidebar":"docs"},"contributing-guide/contributing-to-suborbital":{"id":"contributing-guide/contributing-to-suborbital","title":"Contributing to Suborbital","description":"Your very first contribution","sidebar":"docs"},"grav/introduction/concepts/a-brief-overview":{"id":"grav/introduction/concepts/a-brief-overview","title":"A brief overview","description":"Since Grav is embedded, it is instantiated as a grav.Grav object","sidebar":"docs"},"grav/introduction/concepts/pods":{"id":"grav/introduction/concepts/pods","title":"Pods","description":"The Grav instance on its own is not very useful without anything connected to it. A Pod is a lightweight bi-directional connection to the Grav instance. A Pod is created by calling the Connect() method on the Grav instance. The Grav instance can be connected to many Pods, up to thousands at once. A Pod can send messages to be routed through the bus, and it can receive messages from the bus.","sidebar":"docs"},"grav/introduction/concepts/receipts":{"id":"grav/introduction/concepts/receipts","title":"Reciepts","description":"When you send a message using a Pod, it will return a MsgReceipt. This object is a reference to the message that you sent, and allows you to easily get replies to the message. A receipt is an extension of the Pod that sent the original message, so any methods that you call are essentially called on the Pod itself. This means that calling receipt.WaitOn(msgFunc) is a shortcut for calling WaitOn on the Pod itself \\\\(with filtering enabled to only receive replies to the original message\\\\).","sidebar":"docs"},"grav/introduction/concepts/the-grav-instance":{"id":"grav/introduction/concepts/the-grav-instance","title":"The Grav Instance","description":"The main component of Grav is the grav.Grav instance. It contains the core message bus that facilitates sending and receiving messages. Each application instance should get one Grav instance. If meshing is needed, Transport and Discovery plugins are configured when instantiating the Grav instance. Your application code then creates connections to the Grav instance in the form of Pods, which are discussed next.","sidebar":"docs"},"grav/networking/discovery/getting-started-discovery":{"id":"grav/networking/discovery/getting-started-discovery","title":"Discovery","description":"Discovery plugins are an optional add-on to Grav that enable instances to automatically discover and connect to one another to form a mesh.","sidebar":"docs"},"grav/networking/discovery/local-network-discovery":{"id":"grav/networking/discovery/local-network-discovery","title":"Local Network Discovery","description":"The local-network discovery plugins enables Grav instances to automatically find one another on the local network. Full documentation is coming soon, see the discovery directory for code examples.","sidebar":"docs"},"grav/networking/transports/getting-started-transports":{"id":"grav/networking/transports/getting-started-transports","title":"Transports","description":"Transports are plugins that allow Grav instances to connect","sidebar":"docs"},"grav/networking/transports/http-transport":{"id":"grav/networking/transports/http-transport","title":"HTTP Transport","description":"Full documentation of the HTTP Transport is coming soon. See the transport directory for example code.","sidebar":"docs"},"grav/networking/transports/nats-transport":{"id":"grav/networking/transports/nats-transport","title":"NATS Transport","description":"Full documentation of the NATS Transport is coming soon. See the transport directory for example code.","sidebar":"docs"},"grav/networking/transports/websocket-transport":{"id":"grav/networking/transports/websocket-transport","title":"Websocket Transport","description":"Full documentation of the Websocket Transport is coming soon. See the transport directory for example code.","sidebar":"docs"},"grav/usage/getting-started/grav-instance-options":{"id":"grav/usage/getting-started/grav-instance-options","title":"Grav Instance Options","description":"When calling grav.New, you can optionally include some options:","sidebar":"docs"},"grav/usage/getting-started/receiving-messages":{"id":"grav/usage/getting-started/receiving-messages","title":"Receiving Messages","description":"Pods have several different methods beyond On to help with receiving messages in different scenarios. There are two types of receive methods: asynchronous and synchronous. Synchronous receive methods block until the desired message is received, whereas asynchronous receive methods run \\"in the background\\" and do not block at the callsite.","sidebar":"docs"},"grav/usage/getting-started/request-reply":{"id":"grav/usage/getting-started/request-reply","title":"Request / Reply","description":"Beyond just sending messages, Grav can be used to make requests and get replies. This can be useful for service-to-service communication, RPC-style message, and more.","sidebar":"docs"},"grav/usage/getting-started/sending-messages":{"id":"grav/usage/getting-started/sending-messages","title":"Sending Messages","description":"Sending a message using a Pod is as simple as calling Send(msg). The only required field is the message type, which is analogous to a topic or subject in other messaging systems. Messages have a few other properties that can be taken advantage of, which will be discussed in a future section.","sidebar":"docs"},"grav/usage/getting-started/start-here":{"id":"grav/usage/getting-started/start-here","title":"Getting Started","description":"To get started, import github.com/suborbital/grav/grav and","sidebar":"docs"},"grav/usage/getting-started/using-the-grav-instance":{"id":"grav/usage/getting-started/using-the-grav-instance","title":"Using the Grav Instance","description":"Once you have a Grav instance, you can start connecting Pods and sending messages!","sidebar":"docs"},"grav/what-is-grav":{"id":"grav/what-is-grav","title":"What is Grav?","description":"Grav is an embedded distributed messaging library for Go applications","sidebar":"docs"},"intro-to-webassembly/history":{"id":"intro-to-webassembly/history","title":"History of the Internet","description":"The World Wide Web originally started out as a document exchange network to","sidebar":"docs"},"intro-to-webassembly/why-webassembly":{"id":"intro-to-webassembly/why-webassembly","title":"Why WebAssembly","description":"","sidebar":"docs"},"reactr/faas":{"id":"reactr/faas","title":"faas","description":"Reactr FaaS \u2601\ufe0f","sidebar":"docs"},"reactr/grav":{"id":"reactr/grav","title":"Reactr \u2795 Grav","description":"Reactr is designed to integrate with the other Suborbital projects such as Grav. Grav is a decentralized message bus which allows for your application code to communicate in a scalable, resilient way.","sidebar":"docs"},"reactr/guide":{"id":"reactr/guide","title":"Get started with Reactr \ud83d\ude80","description":"Reactr is the underlying component that provides the runtime for executing the individual WebAssembly functions, the Runnables. Once you\'ve picked up on the basics of Runnables, follow along here to learn what makes Reactr so powerful.","sidebar":"docs"},"reactr/wasm":{"id":"reactr/wasm","title":"Reactr \u2764\ufe0f WebAssembly","description":"Reactr has first-class support for WebAssembly-packaged Runnables. Wasm is an incredibly useful modern portable binary format that allows multiple languages to be compiled into .wasm modules.","sidebar":"docs"},"sat/about-sat":{"id":"sat/about-sat","title":"About Sat","description":"Sat is a WebAssembly-powered server designed to have the maximum performance and smallest possible footprint. Our Atmo project is a fully-fledged platform with support for running entire applications, whereas Sat takes the opposite approach: run a single Wasm module blazing fast!","sidebar":"docs"},"subo/get-started":{"id":"subo/get-started","title":"Get started","description":"Subo includes the WebAssembly toolchain for Suborbital projects."},"subo/README":{"id":"subo/README","title":"Subo, the Suborbital CLI","description":"Subo is the command-line helper for working with the Suborbital Development Platform. Subo is used to build Wasm Runnables, generate new projects and config files, and more over time."},"suborbital-ecosystem/the-suborbital-ecosystem":{"id":"suborbital-ecosystem/the-suborbital-ecosystem","title":"The Suborbital Ecosystem","description":"Suborbital is a collection of open source projects and an associated enterprise product. Everything we do revolves around making server-side WebAssembly a useful and powerful tool for developers.","sidebar":"docs"},"vektor/getting-started":{"id":"vektor/getting-started","title":"The Vektor Guide \ud83d\uddfa","description":"Vektor\'s goal is to help you develop web services faster.","sidebar":"docs"},"vektor/testing-vk-servers":{"id":"vektor/testing-vk-servers","title":"Testing Vektor Servers","description":"vtest is a powerful package for testing your Vektor servers without running an HTTP server bound to a port. vtest uses the standard Go testing package, which lets you integrate server route testing into your test suite. Let\'s explore a simple wordcount API server and add some tests to it.","sidebar":"docs"}}}')}}]);